Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

Because save points are going to be different depending on what logical changes are being made, it doesn't make sense to do so on
a set time frame.  Also, if done so automatically, changes make would need to be committed, requiring a commit message.
Even if a notification, or auto-save, popped up to ask for a message, it might not be a good time for said save/commit, negating
the reason/purpose for the commits needing to be one logical change, and thus, what message would you write?
It is better to have the power to save as needed, commit as needed, and then pull/push when commits are complete.


Describe the differences between forks, clones, and branches.  When would you use one instead of another?
Branches branch off of one line of commits (for a new feature or language to try out without damaging the master code which hopefully works).
Clones are copies of the existing files, file structure, and commit history.
Forks are clones of existing projects that can be made more easily than cloning to a local repository and then back to GitHub, etc.


What is the benefit of having a copy of the last known state of the remote stored locally?
It helps to compare with what the current status is of the local repository.  
This way, one can know if the current repository is in need of pushing to the remote repository.


How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?
I would have to use some sort of file sharing application such as Sharepoint or GoogleDocs or just emailing back and forth
the different files.  It would be very time consuming and band-width consuming.
GitHub is easier for those two reasons. Also, merging changes made to the same files being worked on by more than one person
are easier to fix/tweak and then move forward.  It just takes knowing the GitHub interface.  Well worth the effot.

